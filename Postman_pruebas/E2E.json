{
	"info": {
		"_postman_id": "74763462-8124-4486-8ebd-e96c21c0d8b5",
		"name": "Proyecto PLAT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39654236"
	},
	"item": [
		{
			"name": "Ver categorias",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.exist.and.to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(function(item) {\r",
							"        pm.expect(item).to.have.all.keys('categoryId', 'categoryTitle', 'imageUrl', 'parentCategory');\r",
							"\r",
							"        pm.expect(item.parentCategory).to.have.all.keys('categoryId', 'categoryTitle', 'imageUrl');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"The categoryTitle must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(function(item) {\r",
							"        pm.expect(item.categoryTitle).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"ParentCategory Object Schema Validation\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array');\r",
							"\r",
							"    responseData.collection.forEach(function(item) {\r",
							"        pm.expect(item.parentCategory).to.be.an('object');\r",
							"        pm.expect(item.parentCategory).to.have.all.keys('categoryId', 'categoryTitle', 'imageUrl');\r",
							"\r",
							"        pm.expect(item.parentCategory.categoryId).to.satisfy(function(id) {\r",
							"            return id === null || typeof id === 'number';\r",
							"        });\r",
							"        pm.expect(item.parentCategory.categoryTitle).to.satisfy(function(title) {\r",
							"            return title === null || typeof title === 'string';\r",
							"        });\r",
							"        pm.expect(item.parentCategory.imageUrl).to.satisfy(function(url) {\r",
							"            return url === null || typeof url === 'string';\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response body matches expected structure\", function () {\r",
							"    const expectedResponse = {\r",
							"        collection: [\r",
							"            {\r",
							"                categoryId: 1,\r",
							"                categoryTitle: \"Computer\",\r",
							"                imageUrl: null,\r",
							"                parentCategory: {\r",
							"                    categoryId: null,\r",
							"                    categoryTitle: null,\r",
							"                    imageUrl: null\r",
							"                }\r",
							"            },\r",
							"            {\r",
							"                categoryId: 2,\r",
							"                categoryTitle: \"Mode\",\r",
							"                imageUrl: null,\r",
							"                parentCategory: {\r",
							"                    categoryId: null,\r",
							"                    categoryTitle: null,\r",
							"                    imageUrl: null\r",
							"                }\r",
							"            },\r",
							"            {\r",
							"                categoryId: 3,\r",
							"                categoryTitle: \"Game\",\r",
							"                imageUrl: null,\r",
							"                parentCategory: {\r",
							"                    categoryId: null,\r",
							"                    categoryTitle: null,\r",
							"                    imageUrl: null\r",
							"                }\r",
							"            }\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.deep.equal(expectedResponse);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}/app/api/categories",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET PRODUCTS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(function(product) {\r",
							"        pm.expect(product).to.have.all.keys('productId', 'productTitle', 'imageUrl', 'sku', 'priceUnit', 'quantity', 'category');\r",
							"        pm.expect(product.category).to.have.all.keys('categoryId', 'categoryTitle', 'imageUrl');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PriceUnit and Quantity are non-negative integers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(function(product) {\r",
							"        pm.expect(product.priceUnit).to.be.a('number').and.to.be.at.least(0, \"PriceUnit should be a non-negative integer\");\r",
							"        pm.expect(product.quantity).to.be.a('number').and.to.be.at.least(0, \"Quantity should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}/app/api/products",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "LOGIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response JSON\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Guarda el token como variable de colección\r",
							"pm.collectionVariables.set(\"jwtToken\", jsonData.jwtToken);\r",
							"\r",
							"// También puedes mostrar un log opcional en la consola\r",
							"console.log(\"Token guardado en variable de colección: \" + jsonData.jwtToken);\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains the required field 'jwtToken'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('jwtToken');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"jwtToken must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.jwtToken).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"jwtToken should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema against expected structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('jwtToken');\r",
							"    pm.expect(responseData.jwtToken).to.be.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n   \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}/app/api/authenticate",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET PAYMENTS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema matches the expected structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('collection').that.is.an('array');\r",
							"    \r",
							"    responseData.collection.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.property('paymentId').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('isPayed').that.is.a('boolean');\r",
							"        pm.expect(item).to.have.property('paymentStatus').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('order').that.is.an('object');\r",
							"        \r",
							"        pm.expect(item.order).to.have.property('orderId').that.is.a('number');\r",
							"        pm.expect(item.order).to.have.property('orderDate').that.is.a('string');\r",
							"        pm.expect(item.order).to.have.property('orderDesc').that.is.a('string');\r",
							"        pm.expect(item.order).to.have.property('orderFee').that.is.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PaymentId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.collection).to.be.an('array');\r",
							"    responseData.collection.forEach(payment => {\r",
							"        pm.expect(payment.paymentId).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}/app/api/payments",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET ADDRESS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema of the collection array and its objects\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array');\r",
							"\r",
							"    responseData.collection.forEach(item => {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.all.keys('addressId', 'fullAddress', 'postalCode', 'city', 'user');\r",
							"        \r",
							"        pm.expect(item.user).to.be.an('object');\r",
							"        pm.expect(item.user).to.have.all.keys('userId', 'firstName', 'lastName', 'imageUrl', 'email', 'phone');\r",
							"        \r",
							"        pm.expect(item.addressId).to.be.a('number');\r",
							"        pm.expect(item.fullAddress).to.be.a('string');\r",
							"        pm.expect(item.postalCode).to.be.a('string');\r",
							"        pm.expect(item.city).to.be.a('string');\r",
							"        \r",
							"        pm.expect(item.user.userId).to.be.a('number');\r",
							"        pm.expect(item.user.firstName).to.be.a('string');\r",
							"        pm.expect(item.user.lastName).to.be.a('string');\r",
							"        pm.expect(item.user.imageUrl).to.be.a('string');\r",
							"        pm.expect(item.user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"        pm.expect(item.user.phone).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User object contains required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(item => {\r",
							"        pm.expect(item.user).to.be.an('object');\r",
							"        pm.expect(item.user).to.have.all.keys('userId', 'firstName', 'lastName', 'imageUrl', 'email', 'phone');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}/app/api/address",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"address"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET ORDERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('collection');\r",
							"    \r",
							"    responseData.collection.forEach(order => {\r",
							"        pm.expect(order).to.have.all.keys('orderId', 'orderDate', 'orderDesc', 'orderFee', 'cart');\r",
							"        pm.expect(order.cart).to.have.all.keys('cartId', 'userId');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that orderId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(order => {\r",
							"        pm.expect(order.orderId).to.be.a('number').and.to.be.at.least(0, \"orderId must be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}/app/api/orders",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET SHIPPING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response matches the expected schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('collection').that.is.an('array');\r",
							"\r",
							"    responseData.collection.forEach(item => {\r",
							"        pm.expect(item).to.have.all.keys('productId', 'orderId', 'orderedQuantity', 'product', 'order');\r",
							"        pm.expect(item.product).to.have.all.keys('productId', 'productTitle', 'imageUrl', 'sku', 'priceUnit', 'quantity');\r",
							"        pm.expect(item.order).to.have.all.keys('orderId', 'orderDate', 'orderDesc', 'orderFee');\r",
							"        \r",
							"        pm.expect(item.product.productId).to.be.a('number');\r",
							"        pm.expect(item.order.orderId).to.be.a('number');\r",
							"        pm.expect(item.orderedQuantity).to.be.a('number');\r",
							"        pm.expect(item.product.priceUnit).to.be.a('number');\r",
							"        pm.expect(item.product.quantity).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Collection array contains at least one element and has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(item => {\r",
							"        pm.expect(item).to.have.all.keys('productId', 'orderId', 'orderedQuantity', 'product', 'order');\r",
							"        pm.expect(item.product).to.have.all.keys('productId', 'productTitle', 'imageUrl', 'sku', 'priceUnit', 'quantity');\r",
							"        pm.expect(item.order).to.have.all.keys('orderId', 'orderDate', 'orderDesc', 'orderFee');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"userId\": \"{{$randomInt}}\",\r\n\"firstName\": \"Alejandro\",\r\n\"lastName\": \"Cordoba\",\r\n\"imageUrl\": \"{{$randomUrl}}\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"addressDtos\": [{\r\n\"fullAddress\": \"123 Main St\",\r\n\"postalCode\": \"12345\",\r\n\"city\": \"New York\"\r\n}\r\n],\r\n\"credential\": {\r\n\"username\": \"johndoe\",\r\n\"password\": \"securePassword123\",\r\n\"roleBasedAuthority\": \"ROLE_USER\",\r\n\"isEnabled\": true,\r\n\"isAccountNonExpired\": true,\r\n\"isAccountNonLocked\": true,\r\n\"isCredentialsNonExpired\": true\r\n}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}/app/api/shippings?orderId=1&productId=1",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"shippings"
					],
					"query": [
						{
							"key": "orderId",
							"value": "1"
						},
						{
							"key": "productId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET favourites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema of the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('collection').that.is.an('array');\r",
							"\r",
							"    responseData.collection.forEach(item => {\r",
							"        pm.expect(item).to.be.an('object').that.includes.all.keys('userId', 'productId', 'likeDate', 'user', 'product');\r",
							"\r",
							"        pm.expect(item.user).to.be.an('object').that.includes.all.keys('userId', 'firstName', 'lastName', 'imageUrl', 'email', 'phone');\r",
							"        pm.expect(item.product).to.be.an('object').that.includes.all.keys('productId', 'productTitle', 'imageUrl', 'sku', 'priceUnit', 'quantity');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains the required fields in the collection object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(item => {\r",
							"        pm.expect(item).to.have.all.keys('userId', 'productId', 'likeDate', 'user', 'product');\r",
							"        pm.expect(item.user).to.have.all.keys('userId', 'firstName', 'lastName', 'imageUrl', 'email', 'phone');\r",
							"        pm.expect(item.product).to.have.all.keys('productId', 'productTitle', 'imageUrl', 'sku', 'priceUnit', 'quantity');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User's email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    responseData.collection.forEach(item => {\r",
							"        pm.expect(item.user.email).to.exist;\r",
							"        pm.expect(item.user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"userId\": \"{{$randomInt}}\",\r\n\"firstName\": \"Alejandro\",\r\n\"lastName\": \"Cordoba\",\r\n\"imageUrl\": \"{{$randomUrl}}\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"addressDtos\": [{\r\n\"fullAddress\": \"123 Main St\",\r\n\"postalCode\": \"12345\",\r\n\"city\": \"New York\"\r\n}\r\n],\r\n\"credential\": {\r\n\"username\": \"johndoe\",\r\n\"password\": \"securePassword123\",\r\n\"roleBasedAuthority\": \"ROLE_USER\",\r\n\"isEnabled\": true,\r\n\"isAccountNonExpired\": true,\r\n\"isAccountNonLocked\": true,\r\n\"isCredentialsNonExpired\": true\r\n}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}/app/api/favourites",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"favourites"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields in the collection object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(function(user) {\r",
							"        pm.expect(user).to.have.all.keys('userId', 'firstName', 'lastName', 'imageUrl', 'email', 'phone', 'credential');\r",
							"        \r",
							"        pm.expect(user.credential).to.have.all.keys('credentialId', 'username', 'password', 'roleBasedAuthority', 'isEnabled', 'isAccountNonExpired', 'isAccountNonLocked', 'isCredentialsNonExpired');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the user object within the collection\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(user => {\r",
							"        pm.expect(user).to.be.an('object');\r",
							"        pm.expect(user).to.have.all.keys('userId', 'firstName', 'lastName', 'imageUrl', 'email', 'phone', 'credential');\r",
							"        \r",
							"        pm.expect(user.userId).to.be.a('number');\r",
							"        pm.expect(user.firstName).to.be.a('string');\r",
							"        pm.expect(user.lastName).to.be.a('string');\r",
							"        pm.expect(user.imageUrl).to.be.a('string');\r",
							"        pm.expect(user.email).to.be.a('string').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"        pm.expect(user.phone).to.be.a('string');\r",
							"\r",
							"        pm.expect(user.credential).to.be.an('object');\r",
							"        pm.expect(user.credential).to.have.all.keys('credentialId', 'username', 'password', 'roleBasedAuthority', 'isEnabled', 'isAccountNonExpired', 'isAccountNonLocked', 'isCredentialsNonExpired');\r",
							"        \r",
							"        pm.expect(user.credential.credentialId).to.be.a('number');\r",
							"        pm.expect(user.credential.username).to.be.a('string');\r",
							"        pm.expect(user.credential.password).to.be.a('string');\r",
							"        pm.expect(user.credential.roleBasedAuthority).to.be.a('string');\r",
							"        pm.expect(user.credential.isEnabled).to.be.a('boolean');\r",
							"        pm.expect(user.credential.isAccountNonExpired).to.be.a('boolean');\r",
							"        pm.expect(user.credential.isAccountNonLocked).to.be.a('boolean');\r",
							"        pm.expect(user.credential.isCredentialsNonExpired).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.collection).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.collection.forEach(function(user) {\r",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"userId\": \"{{$randomInt}}\",\r\n \"firstName\": \"Alejandro\",\r\n \"lastName\": \"Cordoba\",\r\n \"imageUrl\": \"{{$randomUrl}}\",\r\n \"email\": \"{{$randomEmail}}\",\r\n \"addressDtos\": [\r\n{\r\n \"fullAddress\": \"123 Main St\",\r\n \"postalCode\": \"12345\",\r\n \"city\": \"New York\"\r\n }\r\n ],\r\n \"credential\": {\r\n \"username\": \"johndoe\",\r\n \"password\": \"securePassword123\",\r\n \"roleBasedAuthority\": \"ROLE_USER\",\r\n \"isEnabled\": true,\r\n \"isAccountNonExpired\": true,\r\n \"isAccountNonLocked\": true,\r\n \"isCredentialsNonExpired\": true\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}/app/api/users",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET CREDENTIALS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Verificar que la respuesta sea 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// 2. Tiempo de respuesta menor a 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 3. Verificar que el objeto principal tenga el array collection no vacío\r",
							"pm.test(\"Response has a non-empty 'collection' array\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.be.an('object');\r",
							"    pm.expect(json.collection).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"// 4. Verificar que cada credential tiene las claves esperadas\r",
							"pm.test(\"Each credential object contains expected fields\", function () {\r",
							"    const credentials = pm.response.json().collection;\r",
							"\r",
							"    credentials.forEach(credential => {\r",
							"        pm.expect(credential).to.have.all.keys(\r",
							"            'credentialId', 'username', 'password', 'roleBasedAuthority',\r",
							"            'isEnabled', 'isAccountNonExpired', 'isAccountNonLocked',\r",
							"            'isCredentialsNonExpired', 'user'\r",
							"        );\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Verificar que cada user tenga las claves esperadas\r",
							"pm.test(\"Each user object inside credential is valid\", function () {\r",
							"    const credentials = pm.response.json().collection;\r",
							"\r",
							"    credentials.forEach(({ user }) => {\r",
							"        pm.expect(user).to.have.all.keys('userId', 'firstName', 'lastName', 'imageUrl', 'email', 'phone');\r",
							"        pm.expect(user.userId).to.be.a('number').that.is.at.least(0);\r",
							"        pm.expect(user.firstName).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(user.lastName).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(user.imageUrl).to.be.a('string').that.includes(\"http\");\r",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"        pm.expect(user.phone).to.be.a('string').that.is.not.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Validar formato de email en todos los usuarios\r",
							"pm.test(\"All emails are in valid format\", function () {\r",
							"    const credentials = pm.response.json().collection;\r",
							"\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"\r",
							"    credentials.forEach(({ user }) => {\r",
							"        pm.expect(user.email).to.match(emailRegex, \"Email format is invalid\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"userId\": \"{{$randomInt}}\",\r\n \"firstName\": \"Alejandro\",\r\n \"lastName\": \"Cordoba\",\r\n \"imageUrl\": \"{{$randomUrl}}\",\r\n \"email\": \"{{$randomEmail}}\",\r\n \"addressDtos\": [\r\n{\r\n \"fullAddress\": \"123 Main St\",\r\n \"postalCode\": \"12345\",\r\n \"city\": \"New York\"\r\n }\r\n ],\r\n \"credential\": {\r\n \"username\": \"pepepipi\",\r\n \"password\": \"securePassword123\",\r\n \"roleBasedAuthority\": \"ROLE_USER\",\r\n \"isEnabled\": true,\r\n \"isAccountNonExpired\": true,\r\n \"isAccountNonLocked\": true,\r\n \"isCredentialsNonExpired\": true\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}/app/api/credentials",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"app",
						"api",
						"credentials"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "",
			"type": "string"
		},
		{
			"key": "jwtToken",
			"value": ""
		},
		{
			"key": "http",
			"value": "",
			"type": "string"
		}
	]
}